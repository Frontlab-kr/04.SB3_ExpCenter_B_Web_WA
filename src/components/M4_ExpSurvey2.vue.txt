<template>
  <v-dialog aria-modal="true" @update:modelValue="DialogClose" v-model="bDialog" width="500px">
    <v-card class="pa-4" style="height: 90vh;">
      <h2 class="mb-3 nor_table_center">설문 조사</h2>
      <div class="bg-gap-3"></div>
      <div v-for="(question, index) in questions" :key="index" class="mb-3">
        <div tabindex="0">{{ index + 1 }}. {{ question.SURVEY_ITEM_TEXT }}</div>
        <div v-if="question.SURVEY_ITEM_TYPE == '01'">
          <v-radio-group v-model="question.REAL_CHECK" v-for="(option, optionIndex) in question.options" :key="optionIndex">
            <v-radio tabindex="0" 
              :label="option.SURVEY_CASE_TEXT"
               class="ml-5 mt-2 mb-n3"
               density="compact"
               message="테스트"
              :value="optionIndex+1"
              @focus="focusedIndex[index] = optionIndex"
              @blur="focusedIndex[index] = null"
              :class="{ 'focused-radio': focusedIndex[index] == optionIndex }">
            </v-radio>
          </v-radio-group>
        </div>
        <div v-else>
          <M4_Input hide-details v-model="question.USER_INPUT" label="내용입력" placeholder="" ></M4_Input>
        </div>
      </div>
      <div class="d-flex flex-wrap mt-4">
        <v-spacer></v-spacer>
        <v-btn @click="SetExpSurveyInfo()" class="mb-1" color="primary" width="100">{{ $t("all_btn_save")}}</v-btn>
      </div>
    </v-card>
  </v-dialog>
</template>

<script>
import axios from "axios";
import { EventBus } from '@/EventBus.js';

export default {
  data() {
    return {
      bDialog : false,
      focusedIndex : [],
      questions: [],
      oLogInfo : {
        EXP_RSVT_IDX : 0,
        EXP_CD : "",
        NM : "",
      }
    };
  },
  methods: {
    DialogClose() {
      this.bDialog = false;      
      this.$store.state.isDialog = false;
      EventBus.$emit("onBackDialogBtn");       
    },

    ShowDialog(oLogInfo) {
      this.bDialog = true
      this.oLogInfo = {...oLogInfo}
      this.GetExpSurveyInfo();
    },

    GetExpSurveyInfo() {
      this.questions = []
      this.focusedIndex = []

      var posData = {
      }

      axios
        .post(import.meta.env.VITE_UIL_API + "GetExpSurveyInfo", posData , {
          headers: {
          }
        })
        .then(res => {
          if (res.data.ResultCd === "00") {
            for (let i = 0; i < res.data.Result1.length; i ++) {
              let oPushItem = {
                SURVEY_IDX : res.data.Result1[i].SURVEY_IDX,
                SURVEY_ITEM_TYPE : res.data.Result1[i].SURVEY_ITEM_TYPE,
                SURVEY_ITEM_TEXT : res.data.Result1[i].SURVEY_ITEM_TEXT,
                SURVEY_ITEM_IDX : res.data.Result1[i].SURVEY_ITEM_IDX,
                REAL_CHECK : 0,
                USER_INPUT : "0",
                options : [],
              }

              let zSelectOptions = res.data.Result2.filter(item => item.SURVEY_ITEM_IDX == res.data.Result1[i].SURVEY_ITEM_IDX)

              for (let k = 0; k < zSelectOptions.length; k ++) {
                oPushItem.options.push({
                  SURVEY_CASE_TEXT : zSelectOptions[k].SURVEY_CASE_TEXT,
                  CHEK_CASE_SER : zSelectOptions[k].SURVEY_CASE_SER,
                })

                oPushItem.REAL_CHECK = zSelectOptions[0].SURVEY_CASE_SER
              }

              if (zSelectOptions.length == 0) {
                oPushItem.options.push({
                  SURVEY_CASE_TEXT : "",
                  CHEK_CASE_SER : 0,
                })

                oPushItem.USER_INPUT = ""
              }

              console.log(oPushItem.USER_INPUT);


              this.questions.push(oPushItem)
              this.focusedIndex.push(-1)
            }
          } else {
            EventBus.$emit("onShowMsg", {
              cSubTitle : "목록 조회 중 문제가 발생했습니다.",
              cTitle : "계속 지속될 경우 담당자에게 문의 바랍니다.",
              cMsg : `Error : ${res.data.Msg}`,
            });
          }
        })
        .catch(err =>{
          EventBus.$emit("onShowMsg", {
            cSubTitle : "목록 조회 중 문제가 발생했습니다.",
            cTitle : "계속 지속될 경우 담당자에게 문의 바랍니다.",
            cMsg : `Error : ${err}`,
          });
        })
        .finally(() =>{
        })
    },


    SetExpSurveyInfo() {
      var zAnserData = []

      for (let i = 0; i < this.questions.length; i ++) {
        this.questions[i].USER_INPUT.trim()

        if (this.questions[i].SURVEY_ITEM_TYPE == "03" && this.questions[i].USER_INPUT == "") {
          EventBus.$emit("onShowMsg", {
            cSubTitle : "입력이 누락된 부분이 있습니다.",
            cTitle : `${i + 1}번 항목에 대한 답변을 작성해 주세요`,
            cMsg : "",
          });
          return
        } else {
          zAnserData.push({
            SURVEY_IDX : this.questions[i].SURVEY_IDX,
            SURVEY_ITEM_IDX : this.questions[i].SURVEY_ITEM_IDX,
            CHEK_CASE_SER : this.questions[i].REAL_CHECK,
            USER_INPUT : this.questions[i].USER_INPUT,
          })
        }
      }

      var posData = {
        SITE_CD : import.meta.env.VITE_SITE_CD,
        EXP_CD       : this.oLogInfo.EXP_CD,
        EXP_RSVT_IDX : this.oLogInfo.EXP_RSVT_IDX,
        NM           : this.oLogInfo.NM,
        SruveyItem   : zAnserData,
      }

      axios
        .post(import.meta.env.VITE_UIL_API + "SetExpSurveyInfo", posData , {
          headers: {
          }
        })
        .then(res => {
          if (res.data.ResultCd === "00") {
            this.DialogClose();
            this.$emit("EndSurvey")
          } else {
            EventBus.$emit("onShowMsg", {
              cSubTitle : "목록 조회 중 문제가 발생했습니다.",
              cTitle : "계속 지속될 경우 담당자에게 문의 바랍니다.",
              cMsg : `Error : ${res.data.Msg}`,
            });
          }
        })
        .catch(err =>{
          EventBus.$emit("onShowMsg", {
            cSubTitle : "목록 조회 중 문제가 발생했습니다.",
            cTitle : "계속 지속될 경우 담당자에게 문의 바랍니다.",
            cMsg : `Error : ${err}`,
          });
        })
        .finally(() =>{
        })
    }
  }
};
</script>

<style scoped>
button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}
button:hover {
  background-color: #0056b3;
}

</style>